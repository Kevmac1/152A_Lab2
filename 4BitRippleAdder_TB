// Testbench for a 4-bit ripple-carry adder
module adder_tb;

// Testbench signals
reg [3:0] A, B; // Input registers
wire [3:0] S;   // Output wire
reg cin;        // Carry-in register
wire cout;      // Carry-out wire

// Instantiate the 4-bit ripple-carry adder
fourBitAdder_FourByOne uut (
  .a(A),
  .b(B),
  .cin(cin),
  .s(S),
  .cout(cout)
);

// Test sequences
initial begin
  // Test 1: Basic addition without carry
  A = 4'b0001;  // 1
  B = 4'b0010;  // 2
  cin = 1'b0;   // No carry-in
  #10;          // Wait for propagation
  $display("Test 1: A = %b, B = %b, cin = %b -> S = %b, cout = %b", A, B, cin, S, cout);

  // Test 2: Basic addition with carry-in
  A = 4'b0011;  // 3
  B = 4'b0101;  // 5
  cin = 1'b1;   // Carry-in
  #10;
  $display("Test 2: A = %b, B = %b, cin = %b -> S = %b, cout = %b", A, B, cin, S, cout);

  // Test 3: Adding to result in a carry-out
  A = 4'b1111;  // 15
  B = 4'b0001;  // 1
  cin = 1'b0;   // No carry-in
  #10;
  $display("Test 3: A = %b, B = %b, cin = %b -> S = %b, cout = %b", A, B, cin, S, cout);

  // Test 4: Large addition with carry-in
  A = 4'b1010;  // 10
  B = 4'b0101;  // 5
  cin = 1'b1;   // Carry-in
  #10;
  $display("Test 4: A = %b, B = %b, cin = %b -> S = %b, cout = %b", A, B, cin, S, cout);

  // Test 5: Adding zeros
  A = 4'b0000;  // 0
  B = 4'b0000;  // 0
  cin = 1'b0;   // No carry-in
  #10;
  $display("Test 5: A = %b, B = %b, cin = %b -> S = %b, cout = %b", A, B, cin, S, cout);

  $finish; // End the simulation
end

endmodule
